API de Usuários com Autenticação JWT
Este é um backend Node.js que fornece operações CRUD para usuários com autenticação JWT (JSON Web Tokens).

📋 Requisitos
Node.js (v14 ou superior)

MongoDB (local ou Atlas)

npm ou yarn

🚀 Instalação
Clone o repositório:

bash
git clone https://github.com/GabrielMartinsDoliveira/Backend-CodingMobile
Instale as dependências:

bash
npm install
Configure as variáveis de ambiente:
Crie um arquivo .env na raiz do projeto com as seguintes variáveis:

MONGODB_URI=sua-string-de-conexao-mongodb
JWT_SECRET=seu-segredo-jwt
JWT_EXPIRES_IN=1d
PORT=3000
🛠️ Tecnologias Utilizadas
Node.js - Ambiente de execução JavaScript

Express - Framework web

Mongoose - ODM para MongoDB

bcryptjs - Para hash de senhas

jsonwebtoken - Para autenticação JWT

dotenv - Gerenciamento de variáveis de ambiente

📝 Modelo de Usuário
O modelo de usuário (User) contém os seguintes campos:

javascript
{
  name: String,        // Nome do usuário (obrigatório)
  email: String,       // Email do usuário (obrigatório, único)
  password: String,    // Senha (obrigatória, hash armazenado)
  confirmPassword: String, // Confirmação de senha (obrigatória)
  score: Number        // Pontuação do usuário (padrão: 0)
}
🔒 Autenticação JWT
A API utiliza JSON Web Tokens para autenticação. Os tokens são gerados durante o login e devem ser incluídos no cabeçalho Authorization das requisições protegidas.

🚦 Rotas da API
Autenticação
POST /api/auth/register - Registrar novo usuário

POST /api/auth/login - Login de usuário existente

Usuários (requer autenticação)
GET /api/users - Listar todos os usuários

GET /api/users/:id - Obter um usuário específico

PUT /api/users/:id - Atualizar um usuário

DELETE /api/users/:id - Deletar um usuário

📄 Exemplo de Uso
Registro de Usuário
bash
curl -X POST http://localhost:3000/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "name": "João Silva",
    "email": "joao@example.com",
    "password": "senha123",
    "confirmPassword": "senha123"
  }'
Login
bash
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "joao@example.com",
    "password": "senha123"
  }'
Requisição Autenticada
bash
curl -X GET http://localhost:3000/api/users \
  -H "Authorization: Bearer <seu-token-jwt>"
🛡️ Segurança
Senhas armazenadas como hash usando bcrypt

Confirmação de senha no registro

Tokens JWT com expiração

Middleware de autenticação em rotas protegidas

📦 Estrutura do Projeto
├
├── controllers/
│   ├── authController.js # Controlador de autenticação
│   └── userController.js # Controlador de usuários
├── middlewares/
│   └── auth.js        # Middleware de autenticação
├── models/
│   └── User.js        # Modelo de usuário
├── routes/
│   ├── authRoutes.js  # Rotas de autenticação
│   └── userRoutes.js  # Rotas de usuário
├── .env.example       # Exemplo de variáveis de ambiente
├── app.js             # Aplicação principal
└── server.js          # Ponto de entrada
📜 Licença
Este projeto está licenciado sob a licença MIT - veja o arquivo LICENSE para detalhes.

🙏 Créditos
Desenvolvido por [Gabriel Martins DOliveira]
Link Deploy: https://backend-codingmobile.onrender.com

